{"remainingRequest":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/statusBar/providedPanels/aggregationComp.js","dependencies":[{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/statusBar/providedPanels/aggregationComp.js","mtime":499162500000},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/cache-loader/dist/cjs.js","mtime":1538485928640},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v19.0.0\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_community_1 = require(\"ag-grid-community\");\nvar rangeController_1 = require(\"../../rangeController\");\nvar nameValueComp_1 = require(\"./nameValueComp\");\nvar AggregationComp = /*@__PURE__*/ (function (_super) {\n    __extends(AggregationComp, _super);\n    function AggregationComp() {\n        return _super.call(this, AggregationComp.TEMPLATE) || this;\n    }\n    AggregationComp.prototype.preConstruct = function () {\n        this.instantiate(this.context);\n    };\n    AggregationComp.prototype.postConstruct = function () {\n        if (!this.isValidRowModel()) {\n            console.warn(\"ag-Grid: agSelectedRowCountComponent should only be used with the client and server side row model.\");\n            return;\n        }\n        this.eventService.addEventListener(ag_grid_community_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.eventService.addEventListener(ag_grid_community_1.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    };\n    AggregationComp.prototype.isValidRowModel = function () {\n        // this component is only really useful with client or server side rowmodels\n        var rowModelType = this.gridApi.getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType !== 'serverSide';\n    };\n    AggregationComp.prototype.init = function () {\n    };\n    AggregationComp.prototype.setAggregationComponentValue = function (aggFuncName, value, visible) {\n        var statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);\n        if (ag_grid_community_1._.exists(statusBarValueComponent)) {\n            statusBarValueComponent.setValue(ag_grid_community_1._.formatNumberTwoDecimalPlacesAndCommas(value));\n            statusBarValueComponent.setVisible(visible);\n        }\n    };\n    AggregationComp.prototype.getAggregationValueComponent = function (aggFuncName) {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        var refComponentName = aggFuncName + \"AggregationComp\";\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        var statusBarValueComponent = null;\n        var aggregationPanelConfig = ag_grid_community_1._.exists(this.gridOptions.statusBar) ? ag_grid_community_1._.find(this.gridOptions.statusBar.statusPanels, aggFuncName) : null;\n        if (ag_grid_community_1._.exists(aggregationPanelConfig)) {\n            // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs\n            if (!ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams) ||\n                (ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams) &&\n                    ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) &&\n                    ag_grid_community_1._.exists(ag_grid_community_1._.find(aggregationPanelConfig.statusPanelParams.aggFuncs, function (item) { return item === aggFuncName; })))) {\n                statusBarValueComponent = this[refComponentName];\n            }\n        }\n        else {\n            // components not specified - assume we can show this component\n            statusBarValueComponent = this[refComponentName];\n        }\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return statusBarValueComponent;\n    };\n    AggregationComp.prototype.onRangeSelectionChanged = function () {\n        var _this = this;\n        var cellRanges = this.rangeController.getCellRanges();\n        var sum = 0;\n        var count = 0;\n        var numberCount = 0;\n        var min = null;\n        var max = null;\n        var cellsSoFar = {};\n        if (!ag_grid_community_1._.missingOrEmpty(cellRanges)) {\n            cellRanges.forEach(function (cellRange) {\n                // get starting and ending row, remember rowEnd could be before rowStart\n                var startRow = cellRange.start.getGridRow();\n                var endRow = cellRange.end.getGridRow();\n                var startRowIsFirst = startRow.before(endRow);\n                var currentRow = startRowIsFirst ? startRow : endRow;\n                var lastRow = startRowIsFirst ? endRow : startRow;\n                while (true) {\n                    var finishedAllRows = ag_grid_community_1._.missing(currentRow) || lastRow.before(currentRow);\n                    if (finishedAllRows) {\n                        break;\n                    }\n                    cellRange.columns.forEach(function (column) {\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        var cellId = currentRow.getGridCell(column).createId();\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n                        var rowNode = _this.getRowNode(currentRow);\n                        if (ag_grid_community_1._.missing(rowNode)) {\n                            return;\n                        }\n                        var value = _this.valueService.getValue(column, rowNode);\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (ag_grid_community_1._.missing(value) || value === '') {\n                            return;\n                        }\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (value.value) {\n                            value = value.value;\n                        }\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n                            numberCount++;\n                        }\n                        count++;\n                    });\n                    currentRow = _this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n        var gotResult = count > 1;\n        var gotNumberResult = numberCount > 1;\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', (sum / numberCount), gotNumberResult);\n    };\n    AggregationComp.prototype.getRowNode = function (gridRow) {\n        switch (gridRow.floating) {\n            case ag_grid_community_1.Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case ag_grid_community_1.Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    };\n    AggregationComp.TEMPLATE = \"<div class=\\\"ag-status-panel ag-status-panel-aggregations\\\">\\n                <ag-name-value key=\\\"average\\\" default-value=\\\"Average\\\" ref=\\\"avgAggregationComp\\\"></ag-name-value>\\n                <ag-name-value key=\\\"count\\\" default-value=\\\"Count\\\" ref=\\\"countAggregationComp\\\"></ag-name-value>\\n                <ag-name-value key=\\\"min\\\" default-value=\\\"Min\\\" ref=\\\"minAggregationComp\\\"></ag-name-value>\\n                <ag-name-value key=\\\"max\\\" default-value=\\\"Max\\\" ref=\\\"maxAggregationComp\\\"></ag-name-value>\\n                <ag-name-value key=\\\"sum\\\" default-value=\\\"Sum\\\" ref=\\\"sumAggregationComp\\\"></ag-name-value>\\n            </div>\";\n    __decorate([\n        ag_grid_community_1.Autowired('eventService'),\n        __metadata(\"design:type\", ag_grid_community_1.EventService)\n    ], AggregationComp.prototype, \"eventService\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('rangeController'),\n        __metadata(\"design:type\", rangeController_1.RangeController)\n    ], AggregationComp.prototype, \"rangeController\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('valueService'),\n        __metadata(\"design:type\", ag_grid_community_1.ValueService)\n    ], AggregationComp.prototype, \"valueService\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('cellNavigationService'),\n        __metadata(\"design:type\", ag_grid_community_1.CellNavigationService)\n    ], AggregationComp.prototype, \"cellNavigationService\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('pinnedRowModel'),\n        __metadata(\"design:type\", ag_grid_community_1.PinnedRowModel)\n    ], AggregationComp.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('rowModel'),\n        __metadata(\"design:type\", Object)\n    ], AggregationComp.prototype, \"rowModel\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('context'),\n        __metadata(\"design:type\", ag_grid_community_1.Context)\n    ], AggregationComp.prototype, \"context\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)\n    ], AggregationComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('gridOptions'),\n        __metadata(\"design:type\", Object)\n    ], AggregationComp.prototype, \"gridOptions\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('gridApi'),\n        __metadata(\"design:type\", ag_grid_community_1.GridApi)\n    ], AggregationComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        ag_grid_community_1.RefSelector('sumAggregationComp'),\n        __metadata(\"design:type\", nameValueComp_1.NameValueComp)\n    ], AggregationComp.prototype, \"sumAggregationComp\", void 0);\n    __decorate([\n        ag_grid_community_1.RefSelector('countAggregationComp'),\n        __metadata(\"design:type\", nameValueComp_1.NameValueComp)\n    ], AggregationComp.prototype, \"countAggregationComp\", void 0);\n    __decorate([\n        ag_grid_community_1.RefSelector('minAggregationComp'),\n        __metadata(\"design:type\", nameValueComp_1.NameValueComp)\n    ], AggregationComp.prototype, \"minAggregationComp\", void 0);\n    __decorate([\n        ag_grid_community_1.RefSelector('maxAggregationComp'),\n        __metadata(\"design:type\", nameValueComp_1.NameValueComp)\n    ], AggregationComp.prototype, \"maxAggregationComp\", void 0);\n    __decorate([\n        ag_grid_community_1.RefSelector('avgAggregationComp'),\n        __metadata(\"design:type\", nameValueComp_1.NameValueComp)\n    ], AggregationComp.prototype, \"avgAggregationComp\", void 0);\n    __decorate([\n        ag_grid_community_1.PreConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AggregationComp.prototype, \"preConstruct\", null);\n    __decorate([\n        ag_grid_community_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], AggregationComp.prototype, \"postConstruct\", null);\n    return AggregationComp;\n}(ag_grid_community_1.Component));\nexports.AggregationComp = AggregationComp;\n",null]}