{"remainingRequest":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/sideBar/providedPanels/columns/panels/primaryColsPanel/primaryColsListPanel.js","dependencies":[{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/sideBar/providedPanels/columns/panels/primaryColsPanel/primaryColsListPanel.js","mtime":499162500000},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/cache-loader/dist/cjs.js","mtime":1538485928640},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v19.0.0\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar main_1 = require(\"ag-grid-community/main\");\nvar toolPanelColumnGroupComp_1 = require(\"./toolPanelColumnGroupComp\");\nvar toolPanelColumnComp_1 = require(\"./toolPanelColumnComp\");\nvar primaryColsHeaderPanel_1 = require(\"./primaryColsHeaderPanel\");\nvar PrimaryColsListPanel = /*@__PURE__*/ (function (_super) {\n    __extends(PrimaryColsListPanel, _super);\n    function PrimaryColsListPanel() {\n        return _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;\n    }\n    PrimaryColsListPanel.prototype.init = function () {\n        this.addDestroyableEventListener(this.globalEventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnsChanged.bind(this));\n        this.expandGroupsByDefault = !this.props.params.contractColumnSelection;\n        if (this.columnController.isReady()) {\n            this.onColumnsChanged();\n        }\n    };\n    PrimaryColsListPanel.prototype.onColumnsChanged = function () {\n        this.destroyColumnComps();\n        this.columnTree = this.columnController.getPrimaryColumnTree();\n        var groupsExist = this.columnController.isPrimaryColumnGroupsPresent();\n        this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n        this.updateVisibilityOfRows();\n    };\n    PrimaryColsListPanel.prototype.destroyColumnComps = function () {\n        main_1.Utils.removeAllChildren(this.getGui());\n        if (this.columnComps) {\n            main_1.Utils.iterateObject(this.columnComps, function (key, renderedItem) { return renderedItem.destroy(); });\n        }\n        this.columnComps = {};\n    };\n    PrimaryColsListPanel.prototype.recursivelyAddGroupComps = function (columnGroup, dept, groupsExist) {\n        // only render group if user provided the definition\n        var newDept;\n        if (columnGroup.getColGroupDef() && columnGroup.getColGroupDef().suppressToolPanel) {\n            return;\n        }\n        if (!columnGroup.isPadding()) {\n            var renderedGroup = new toolPanelColumnGroupComp_1.ToolPanelColumnGroupComp(columnGroup, dept, this.onGroupExpanded.bind(this), this.props.allowDragging, this.expandGroupsByDefault);\n            this.context.wireBean(renderedGroup);\n            this.getGui().appendChild(renderedGroup.getGui());\n            // we want to indent on the gui for the children\n            newDept = dept + 1;\n            this.columnComps[columnGroup.getId()] = renderedGroup;\n        }\n        else {\n            // no children, so no indent\n            newDept = dept;\n        }\n        this.recursivelyAddComps(columnGroup.getChildren(), newDept, groupsExist);\n    };\n    PrimaryColsListPanel.prototype.onGroupExpanded = function () {\n        this.updateVisibilityOfRows();\n        this.fireExpandedEvent();\n    };\n    PrimaryColsListPanel.prototype.fireExpandedEvent = function () {\n        var _this = this;\n        var expandedCount = 0;\n        var notExpandedCount = 0;\n        var recursiveFunc = function (items) {\n            items.forEach(function (item) {\n                // only interested in groups\n                if (item instanceof main_1.OriginalColumnGroup) {\n                    var comp = _this.columnComps[item.getId()];\n                    if (comp) {\n                        if (comp.isExpanded()) {\n                            expandedCount++;\n                        }\n                        else {\n                            notExpandedCount++;\n                        }\n                    }\n                    var columnGroup = item;\n                    var groupChildren = columnGroup.getChildren();\n                    recursiveFunc(groupChildren);\n                }\n            });\n        };\n        recursiveFunc(this.columnTree);\n        var state;\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            state = primaryColsHeaderPanel_1.SELECTED_STATE.INDETERMINIATE;\n        }\n        else if (notExpandedCount > 0) {\n            state = primaryColsHeaderPanel_1.SELECTED_STATE.UNCHECKED;\n        }\n        else {\n            state = primaryColsHeaderPanel_1.SELECTED_STATE.CHECKED;\n        }\n        this.dispatchEvent({ type: 'groupExpanded', state: state });\n    };\n    PrimaryColsListPanel.prototype.recursivelyAddColumnComps = function (column, dept, groupsExist) {\n        if (column.getColDef() && column.getColDef().suppressToolPanel) {\n            return;\n        }\n        var renderedColumn = new toolPanelColumnComp_1.ToolPanelColumnComp(column, dept, this.props.allowDragging, groupsExist);\n        this.context.wireBean(renderedColumn);\n        this.getGui().appendChild(renderedColumn.getGui());\n        this.columnComps[column.getId()] = renderedColumn;\n    };\n    PrimaryColsListPanel.prototype.recursivelyAddComps = function (tree, dept, groupsExist) {\n        var _this = this;\n        tree.forEach(function (child) {\n            if (child instanceof main_1.OriginalColumnGroup) {\n                _this.recursivelyAddGroupComps(child, dept, groupsExist);\n            }\n            else {\n                _this.recursivelyAddColumnComps(child, dept, groupsExist);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.destroyColumnComps();\n    };\n    PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {\n        main_1._.iterateObject(this.columnComps, function (key, renderedItem) {\n            if (renderedItem.isExpandable()) {\n                renderedItem.setExpanded(value);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.setFilterText = function (filterText) {\n        this.filterText = main_1._.exists(filterText) ? filterText.toLowerCase() : null;\n        this.updateVisibilityOfRows();\n    };\n    PrimaryColsListPanel.prototype.updateVisibilityOfRows = function () {\n        // we have to create the filter results first as that requires dept first search, then setting\n        // the visibility requires breadth first search. this is because a group passes filter if CHILDREN\n        // pass filter, a column passes group open/closed visibility if a PARENT is open. so we need to do\n        // two recursions. we pass the result of the first recursion to the second.\n        var filterResults = main_1._.exists(this.filterText) ? this.createFilterResults() : null;\n        this.recursivelySetVisibility(this.columnTree, true, filterResults);\n    };\n    PrimaryColsListPanel.prototype.createFilterResults = function () {\n        var _this = this;\n        var filterResults = {};\n        // we recurse dept first - as the item should show if any of the children are showing\n        var recursivelyCheckFilter = function (items) {\n            var atLeastOneThisLevelPassed = false;\n            items.forEach(function (item) {\n                var atLeastOneChildPassed = false;\n                if (item instanceof main_1.OriginalColumnGroup) {\n                    var columnGroup = item;\n                    var groupChildren = columnGroup.getChildren();\n                    atLeastOneChildPassed = recursivelyCheckFilter(groupChildren);\n                }\n                var filterPasses;\n                if (atLeastOneChildPassed) {\n                    filterPasses = true;\n                }\n                else {\n                    var comp = _this.columnComps[item.getId()];\n                    if (comp) {\n                        filterPasses = comp.getDisplayName().toLowerCase().indexOf(_this.filterText) >= 0;\n                    }\n                    else {\n                        filterPasses = true;\n                    }\n                }\n                filterResults[item.getId()] = filterPasses;\n                if (filterPasses) {\n                    atLeastOneThisLevelPassed = true;\n                }\n            });\n            return atLeastOneThisLevelPassed;\n        };\n        recursivelyCheckFilter(this.columnTree);\n        return filterResults;\n    };\n    PrimaryColsListPanel.prototype.recursivelySetVisibility = function (columnTree, parentGroupsOpen, filterResults) {\n        var _this = this;\n        columnTree.forEach(function (child) {\n            var comp = _this.columnComps[child.getId()];\n            if (comp) {\n                var passesFilter = filterResults ? filterResults[child.getId()] : true;\n                comp.setVisible(parentGroupsOpen && passesFilter);\n            }\n            if (child instanceof main_1.OriginalColumnGroup) {\n                var columnGroup = child;\n                var childrenOpen = void 0;\n                if (comp) {\n                    var expanded = comp.isExpanded();\n                    childrenOpen = parentGroupsOpen ? expanded : false;\n                }\n                else {\n                    childrenOpen = parentGroupsOpen;\n                }\n                var children = columnGroup.getChildren();\n                _this.recursivelySetVisibility(children, childrenOpen, filterResults);\n            }\n        });\n    };\n    PrimaryColsListPanel.prototype.doSetSelectedAll = function (checked) {\n        main_1._.iterateObject(this.columnComps, function (key, column) {\n            column.onSelectAllChanged(checked);\n        });\n    };\n    PrimaryColsListPanel.TEMPLATE = \"<div class=\\\"ag-primary-cols-list-panel\\\"></div>\";\n    __decorate([\n        main_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", main_1.GridOptionsWrapper)\n    ], PrimaryColsListPanel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        main_1.Autowired('columnController'),\n        __metadata(\"design:type\", main_1.ColumnController)\n    ], PrimaryColsListPanel.prototype, \"columnController\", void 0);\n    __decorate([\n        main_1.Autowired('eventService'),\n        __metadata(\"design:type\", main_1.EventService)\n    ], PrimaryColsListPanel.prototype, \"globalEventService\", void 0);\n    __decorate([\n        main_1.Autowired('context'),\n        __metadata(\"design:type\", main_1.Context)\n    ], PrimaryColsListPanel.prototype, \"context\", void 0);\n    __decorate([\n        main_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], PrimaryColsListPanel.prototype, \"init\", null);\n    return PrimaryColsListPanel;\n}(main_1.Component));\nexports.PrimaryColsListPanel = PrimaryColsListPanel;\n",null]}