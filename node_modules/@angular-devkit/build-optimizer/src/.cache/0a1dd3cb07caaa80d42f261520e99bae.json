{"remainingRequest":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/statusBar/providedPanels/filteredRowsComp.js","dependencies":[{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/statusBar/providedPanels/filteredRowsComp.js","mtime":499162500000},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/cache-loader/dist/cjs.js","mtime":1538485928640},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v19.0.0\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_community_1 = require(\"ag-grid-community\");\nvar nameValueComp_1 = require(\"./nameValueComp\");\nvar FilteredRowsComp = /*@__PURE__*/ (function (_super) {\n    __extends(FilteredRowsComp, _super);\n    function FilteredRowsComp() {\n        return _super.call(this, 'filteredRowCount', 'Filtered') || this;\n    }\n    FilteredRowsComp.prototype.postConstruct = function () {\n        _super.prototype.postConstruct.call(this);\n        // this component is only really useful with client side rowmodel\n        if (this.gridApi.getModel().getType() !== 'clientSide') {\n            console.warn(\"ag-Grid: agFilteredRowCountComponent should only be used with the client side row model.\");\n            return;\n        }\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n        this.setVisible(true);\n        var listener = this.onDataChanged.bind(this);\n        this.eventService.addEventListener(ag_grid_community_1.Events.EVENT_MODEL_UPDATED, listener);\n    };\n    FilteredRowsComp.prototype.onDataChanged = function () {\n        var totalRowCountValue = this.getTotalRowCountValue();\n        var filteredRowCountValue = this.getFilteredRowCountValue();\n        this.setValue(filteredRowCountValue);\n        this.setVisible(totalRowCountValue !== filteredRowCountValue);\n    };\n    FilteredRowsComp.prototype.getTotalRowCountValue = function () {\n        var totalRowCount = 0;\n        this.gridApi.forEachNode(function (node) { return totalRowCount += 1; });\n        return totalRowCount;\n    };\n    FilteredRowsComp.prototype.getFilteredRowCountValue = function () {\n        var filteredRowCount = 0;\n        this.gridApi.forEachNodeAfterFilter(function (node) { return filteredRowCount += 1; });\n        return filteredRowCount;\n    };\n    FilteredRowsComp.prototype.init = function () { };\n    __decorate([\n        ag_grid_community_1.Autowired('eventService'),\n        __metadata(\"design:type\", ag_grid_community_1.EventService)\n    ], FilteredRowsComp.prototype, \"eventService\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired('gridApi'),\n        __metadata(\"design:type\", ag_grid_community_1.GridApi)\n    ], FilteredRowsComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        ag_grid_community_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], FilteredRowsComp.prototype, \"postConstruct\", null);\n    return FilteredRowsComp;\n}(nameValueComp_1.NameValueComp));\nexports.FilteredRowsComp = FilteredRowsComp;\n",null]}