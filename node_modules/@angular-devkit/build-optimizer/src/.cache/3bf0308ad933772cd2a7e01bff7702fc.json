{"remainingRequest":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-community/dist/lib/grid.js","dependencies":[{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-community/dist/lib/grid.js","mtime":499162500000},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/cache-loader/dist/cjs.js","mtime":1538485928640},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\nvar selectionController_1 = require(\"./selectionController\");\nvar columnApi_1 = require(\"./columnController/columnApi\");\nvar columnController_1 = require(\"./columnController/columnController\");\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\nvar headerRootComp_1 = require(\"./headerRendering/headerRootComp\");\nvar filterManager_1 = require(\"./filter/filterManager\");\nvar valueService_1 = require(\"./valueService/valueService\");\nvar eventService_1 = require(\"./eventService\");\nvar gridPanel_1 = require(\"./gridPanel/gridPanel\");\nvar gridApi_1 = require(\"./gridApi\");\nvar balancedColumnTreeBuilder_1 = require(\"./columnController/balancedColumnTreeBuilder\");\nvar displayedGroupCreator_1 = require(\"./columnController/displayedGroupCreator\");\nvar expressionService_1 = require(\"./valueService/expressionService\");\nvar templateService_1 = require(\"./templateService\");\nvar popupService_1 = require(\"./widgets/popupService\");\nvar logger_1 = require(\"./logger\");\nvar columnUtils_1 = require(\"./columnController/columnUtils\");\nvar autoWidthCalculator_1 = require(\"./rendering/autoWidthCalculator\");\nvar horizontalResizeService_1 = require(\"./headerRendering/horizontalResizeService\");\nvar context_1 = require(\"./context/context\");\nvar csvCreator_1 = require(\"./exporter/csvCreator\");\nvar gridCore_1 = require(\"./gridCore\");\nvar standardMenu_1 = require(\"./headerRendering/standardMenu\");\nvar dragAndDropService_1 = require(\"./dragAndDrop/dragAndDropService\");\nvar dragService_1 = require(\"./dragAndDrop/dragService\");\nvar sortController_1 = require(\"./sortController\");\nvar focusedCellController_1 = require(\"./focusedCellController\");\nvar mouseEventService_1 = require(\"./gridPanel/mouseEventService\");\nvar cellNavigationService_1 = require(\"./cellNavigationService\");\nvar utils_1 = require(\"./utils\");\nvar filterStage_1 = require(\"./rowModels/clientSide/filterStage\");\nvar sortStage_1 = require(\"./rowModels/clientSide/sortStage\");\nvar flattenStage_1 = require(\"./rowModels/clientSide/flattenStage\");\nvar cellEditorFactory_1 = require(\"./rendering/cellEditorFactory\");\nvar events_1 = require(\"./events\");\nvar infiniteRowModel_1 = require(\"./rowModels/infinite/infiniteRowModel\");\nvar clientSideRowModel_1 = require(\"./rowModels/clientSide/clientSideRowModel\");\nvar cellRendererFactory_1 = require(\"./rendering/cellRendererFactory\");\nvar cellRendererService_1 = require(\"./rendering/cellRendererService\");\nvar valueFormatterService_1 = require(\"./rendering/valueFormatterService\");\nvar agCheckbox_1 = require(\"./widgets/agCheckbox\");\nvar baseFrameworkFactory_1 = require(\"./baseFrameworkFactory\");\nvar scrollVisibleService_1 = require(\"./gridPanel/scrollVisibleService\");\nvar downloader_1 = require(\"./downloader\");\nvar xmlFactory_1 = require(\"./xmlFactory\");\nvar gridSerializer_1 = require(\"./exporter/gridSerializer\");\nvar stylingService_1 = require(\"./styling/stylingService\");\nvar columnHoverService_1 = require(\"./rendering/columnHoverService\");\nvar columnAnimationService_1 = require(\"./rendering/columnAnimationService\");\nvar sortService_1 = require(\"./rowNodes/sortService\");\nvar filterService_1 = require(\"./rowNodes/filterService\");\nvar autoGroupColService_1 = require(\"./columnController/autoGroupColService\");\nvar paginationProxy_1 = require(\"./rowModels/paginationProxy\");\nvar immutableService_1 = require(\"./rowModels/clientSide/immutableService\");\nvar constants_1 = require(\"./constants\");\nvar valueCache_1 = require(\"./valueService/valueCache\");\nvar changeDetectionService_1 = require(\"./valueService/changeDetectionService\");\nvar alignedGridsService_1 = require(\"./alignedGridsService\");\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\nvar componentResolver_1 = require(\"./components/framework/componentResolver\");\nvar componentRecipes_1 = require(\"./components/framework/componentRecipes\");\nvar componentProvider_1 = require(\"./components/framework/componentProvider\");\nvar agComponentUtils_1 = require(\"./components/framework/agComponentUtils\");\nvar componentMetadataProvider_1 = require(\"./components/framework/componentMetadataProvider\");\nvar beans_1 = require(\"./rendering/beans\");\nvar environment_1 = require(\"./environment\");\nvar animationFrameService_1 = require(\"./misc/animationFrameService\");\nvar navigationService_1 = require(\"./gridPanel/navigationService\");\nvar heightScaler_1 = require(\"./rendering/heightScaler\");\nvar selectableService_1 = require(\"./rowNodes/selectableService\");\nvar autoHeightCalculator_1 = require(\"./rendering/autoHeightCalculator\");\nvar paginationComp_1 = require(\"./rowModels/pagination/paginationComp\");\nvar resizeObserverService_1 = require(\"./misc/resizeObserverService\");\nvar Grid = /*@__PURE__*/ (function () {\n    function Grid(eGridDiv, gridOptions, params) {\n        if (!eGridDiv) {\n            console.error('ag-Grid: no div element provided to the grid');\n        }\n        if (!gridOptions) {\n            console.error('ag-Grid: no gridOptions provided to the grid');\n        }\n        var rowModelClass = this.getRowModelClass(gridOptions);\n        var enterprise = utils_1.Utils.exists(Grid.enterpriseBeans);\n        var frameworkFactory = params ? params.frameworkFactory : null;\n        if (utils_1.Utils.missing(frameworkFactory)) {\n            frameworkFactory = new baseFrameworkFactory_1.BaseFrameworkFactory();\n        }\n        var overrideBeans = [];\n        if (Grid.enterpriseBeans) {\n            overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);\n        }\n        if (Grid.frameworkBeans) {\n            overrideBeans = overrideBeans.concat(Grid.frameworkBeans);\n        }\n        var seed = {\n            enterprise: enterprise,\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            $scope: params ? params.$scope : null,\n            $compile: params ? params.$compile : null,\n            quickFilterOnScope: params ? params.quickFilterOnScope : null,\n            globalEventListener: params ? params.globalEventListener : null,\n            frameworkFactory: frameworkFactory\n        };\n        if (params && params.seedBeanInstances) {\n            utils_1.Utils.assign(seed, params.seedBeanInstances);\n        }\n        var components = [\n            { componentName: 'AgCheckbox', theClass: agCheckbox_1.AgCheckbox },\n            { componentName: 'AgGridComp', theClass: gridPanel_1.GridPanel },\n            { componentName: 'AgHeaderRoot', theClass: headerRootComp_1.HeaderRootComp },\n            { componentName: 'AgPagination', theClass: paginationComp_1.PaginationComp },\n        ];\n        if (Grid.enterpriseComponents) {\n            components = components.concat(Grid.enterpriseComponents);\n        }\n        var contextParams = {\n            overrideBeans: overrideBeans,\n            seed: seed,\n            //Careful with the order of the beans here, there are dependencies between them that need to be kept\n            beans: [rowModelClass, beans_1.Beans, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, componentProvider_1.ComponentProvider, agComponentUtils_1.AgComponentUtils,\n                componentMetadataProvider_1.ComponentMetadataProvider, resizeObserverService_1.ResizeObserverService,\n                componentProvider_1.ComponentProvider, componentResolver_1.ComponentResolver, componentRecipes_1.ComponentRecipes, heightScaler_1.HeightScaler, autoHeightCalculator_1.AutoHeightCalculator,\n                cellRendererFactory_1.CellRendererFactory, horizontalResizeService_1.HorizontalResizeService, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService,\n                displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, selectionController_1.SelectionController,\n                filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, expressionService_1.ExpressionService,\n                balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService,\n                navigationService_1.NavigationService, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, alignedGridsService_1.AlignedGridsService,\n                logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, popupService_1.PopupService, gridCore_1.GridCore, standardMenu_1.StandardMenuFactory,\n                dragAndDropService_1.DragAndDropService, columnApi_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService,\n                cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService,\n                cellEditorFactory_1.CellEditorFactory, cellRendererService_1.CellRendererService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService,\n                columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, selectableService_1.SelectableService, autoGroupColService_1.AutoGroupColService,\n                immutableService_1.ImmutableService, changeDetectionService_1.ChangeDetectionService, environment_1.Environment, animationFrameService_1.AnimationFrameService, sortController_1.SortController],\n            components: components,\n            enterpriseDefaultComponents: Grid.enterpriseDefaultComponents,\n            debug: !!gridOptions.debug\n        };\n        var isLoggingFunc = function () { return contextParams.debug; };\n        this.context = new context_1.Context(contextParams, new logger_1.Logger('Context', isLoggingFunc));\n        this.setColumnsAndData();\n        this.dispatchGridReadyEvent(gridOptions);\n        if (gridOptions.debug) {\n            console.log('ag-Grid -> initialised successfully, enterprise = ' + enterprise);\n        }\n    }\n    Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {\n        this.enterpriseBeans = enterpriseBeans;\n        // the enterprise can inject additional row models. this is how it injects the viewportRowModel\n        utils_1.Utils.iterateObject(rowModelClasses, function (key, value) { return Grid.RowModelClasses[key] = value; });\n    };\n    Grid.setEnterpriseComponents = function (components) {\n        this.enterpriseComponents = components;\n    };\n    Grid.setFrameworkBeans = function (frameworkBeans) {\n        this.frameworkBeans = frameworkBeans;\n    };\n    Grid.setEnterpriseDefaultComponents = function (enterpriseDefaultComponents) {\n        this.enterpriseDefaultComponents = enterpriseDefaultComponents;\n    };\n    Grid.prototype.setColumnsAndData = function () {\n        var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\n        var columnController = this.context.getBean('columnController');\n        var rowModel = this.context.getBean('rowModel');\n        var columnDefs = gridOptionsWrapper.getColumnDefs();\n        var rowData = gridOptionsWrapper.getRowData();\n        var nothingToSet = utils_1.Utils.missing(columnDefs) && utils_1.Utils.missing(rowData);\n        if (nothingToSet) {\n            return;\n        }\n        if (utils_1.Utils.exists(columnDefs)) {\n            columnController.setColumnDefs(columnDefs, \"gridInitializing\");\n        }\n        if (utils_1.Utils.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            var clientSideRowModel = rowModel;\n            clientSideRowModel.setRowData(rowData);\n        }\n    };\n    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {\n        var eventService = this.context.getBean('eventService');\n        var readyEvent = {\n            type: events_1.Events.EVENT_GRID_READY,\n            api: gridOptions.api,\n            columnApi: gridOptions.columnApi\n        };\n        eventService.dispatchEvent(readyEvent);\n    };\n    Grid.prototype.getRowModelClass = function (gridOptions) {\n        var rowModelType = gridOptions.rowModelType;\n        //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)\n        rowModelType = rowModelType === 'enterprise' ? constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE : rowModelType;\n        if (utils_1.Utils.exists(rowModelType)) {\n            var rowModelClass = Grid.RowModelClasses[rowModelType];\n            if (utils_1.Utils.exists(rowModelClass)) {\n                return rowModelClass;\n            }\n            else {\n                if (rowModelType === 'normal') {\n                    console.warn(\"ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.\");\n                    return clientSideRowModel_1.ClientSideRowModel;\n                }\n                console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\n                if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT) {\n                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');\n                }\n                if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n                    console.error('ag-Grid: rowModelType server side is only available in ag-Grid Enterprise');\n                }\n            }\n        }\n        return clientSideRowModel_1.ClientSideRowModel;\n    };\n    Grid.prototype.destroy = function () {\n        this.context.destroy();\n    };\n    // the default is ClientSideRowModel, which is also used for pagination.\n    // the enterprise adds viewport to this list.\n    Grid.RowModelClasses = {\n        infinite: infiniteRowModel_1.InfiniteRowModel,\n        clientSide: clientSideRowModel_1.ClientSideRowModel\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n",null]}