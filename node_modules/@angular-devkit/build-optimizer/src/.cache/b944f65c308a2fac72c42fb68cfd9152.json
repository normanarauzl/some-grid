{"remainingRequest":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/sideBar/sideBarButtonsComp.js","dependencies":[{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/ag-grid-enterprise/dist/lib/sideBar/sideBarButtonsComp.js","mtime":499162500000},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/cache-loader/dist/cjs.js","mtime":1538485928640},{"path":"/home/vdsancheza/Documents/MeanStack/some-grid/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// ag-grid-enterprise v19.0.0\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ag_grid_community_1 = require(\"ag-grid-community\");\nvar SideBarButtonsComp = /*@__PURE__*/ (function (_super) {\n    __extends(SideBarButtonsComp, _super);\n    function SideBarButtonsComp() {\n        var _this = _super.call(this, SideBarButtonsComp.TEMPLATE) || this;\n        _this.panels = {};\n        _this.defaultPanelKey = null;\n        return _this;\n    }\n    SideBarButtonsComp.prototype.registerPanelComp = function (key, panelComponent) {\n        this.panels[key] = panelComponent;\n    };\n    SideBarButtonsComp.prototype.registerGridComp = function (gridPanel) {\n        this.gridPanel = gridPanel;\n    };\n    SideBarButtonsComp.prototype.postConstruct = function () {\n        var buttons = {};\n        var toolPanels = ag_grid_community_1._.get(this.gridOptionsWrapper.getSideBar(), 'toolPanels', []);\n        toolPanels.forEach(function (toolPanel) {\n            buttons[toolPanel.id] = toolPanel;\n        });\n        this.createButtonsHtml(buttons);\n    };\n    SideBarButtonsComp.prototype.createButtonsHtml = function (componentButtons) {\n        var _this = this;\n        var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        var html = '';\n        var keys = Object.keys(componentButtons);\n        keys.forEach(function (key) {\n            var def = componentButtons[key];\n            html += \"<div class=\\\"ag-side-button\\\"\\\"><button type=\\\"button\\\" ref=\\\"toggle-button-\" + key + \"\\\"><div><span class=\\\"ag-icon-\" + def.iconKey + \"\\\"></span></div><span>\" + translate(def.labelKey, def.labelDefault) + \"</span></button></div>\";\n        });\n        this.getGui().innerHTML = html;\n        keys.forEach(function (key) {\n            _this.addButtonEvents(key);\n        });\n        this.defaultPanelKey = ag_grid_community_1._.get(this.gridOptionsWrapper.getSideBar(), 'defaultToolPanel', null);\n        var defaultButtonElement = this.getRefElement(\"toggle-button-\" + this.defaultPanelKey);\n        if (defaultButtonElement) {\n            ag_grid_community_1._.addOrRemoveCssClass(defaultButtonElement.parentElement, 'ag-selected', true);\n        }\n    };\n    SideBarButtonsComp.prototype.addButtonEvents = function (keyToProcess) {\n        var _this = this;\n        var btShow = this.getRefElement(\"toggle-button-\" + keyToProcess);\n        this.addDestroyableEventListener(btShow, 'click', function () { return _this.onButtonPressed(keyToProcess); });\n    };\n    SideBarButtonsComp.prototype.onButtonPressed = function (keyPressed) {\n        var _this = this;\n        Object.keys(this.panels).forEach(function (keyToProcess) {\n            _this.processKeyAfterKeyPressed(keyToProcess, keyPressed);\n        });\n    };\n    SideBarButtonsComp.prototype.processKeyAfterKeyPressed = function (keyToProcess, keyPressed) {\n        var panelToProcess = this.panels[keyToProcess];\n        var clickingThisPanel = keyToProcess === keyPressed;\n        var showThisPanel = clickingThisPanel ? !panelToProcess.isVisible() : false;\n        this.setPanelVisibility(keyToProcess, showThisPanel);\n    };\n    SideBarButtonsComp.prototype.setPanelVisibility = function (key, show) {\n        var panelToProcess = this.panels[key];\n        if (!panelToProcess) {\n            console.warn(\"ag-grid: can't change the visibility for the non existing tool panel item [\" + key + \"]\");\n            return;\n        }\n        panelToProcess.setVisible(show);\n        var button = this.getRefElement(\"toggle-button-\" + key);\n        ag_grid_community_1._.addOrRemoveCssClass(button.parentElement, 'ag-selected', show);\n    };\n    SideBarButtonsComp.prototype.clear = function () {\n        this.setTemplate(SideBarButtonsComp.TEMPLATE);\n        this.panels = {};\n    };\n    SideBarButtonsComp.TEMPLATE = \"<div class=\\\"ag-side-buttons\\\"></div>\";\n    __decorate([\n        ag_grid_community_1.Autowired(\"gridOptionsWrapper\"),\n        __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)\n    ], SideBarButtonsComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        ag_grid_community_1.Autowired(\"eventService\"),\n        __metadata(\"design:type\", ag_grid_community_1.EventService)\n    ], SideBarButtonsComp.prototype, \"eventService\", void 0);\n    __decorate([\n        ag_grid_community_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], SideBarButtonsComp.prototype, \"postConstruct\", null);\n    return SideBarButtonsComp;\n}(ag_grid_community_1.Component));\nexports.SideBarButtonsComp = SideBarButtonsComp;\n",null]}